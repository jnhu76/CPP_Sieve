name: C++ Sieve Benchmark

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch: # 允许手动触发

jobs:
  # 第一阶段：在多个平台上并行编译和运行测试
  build_and_run:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Compile C++ code
      shell: bash
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          cl /EHsc /std:c++20 /O2 /Fe:sieve_experiment.exe sieve_experiment.cpp
        else
          g++ -std=c++20 -O3 -o sieve_experiment sieve_experiment.cpp -pthread
        fi

    - name: Run benchmark
      shell: bash
      run: |
        # 根据操作系统确定可执行文件名
        EXECUTABLE="./sieve_experiment"
        if [ "${{ runner.os }}" == "Windows" ]; then
          EXECUTABLE="./sieve_experiment.exe"
        fi

        # 创建结果文件并写入表头
        echo "OS,Version,Threads,Time" > results.csv

        # 循环测试不同版本和线程数
        for version in mutex spinlock atomic unsafe; do
          for threads in 1 2 4; do
            echo "Running ${version} with ${threads} threads on ${{ matrix.os }}..."
            # 运行程序并提取执行时间
            output=$($EXECUTABLE $threads $version)
            time=$(echo "$output" | grep 'Execution time:' | awk '{print $3}')
            
            # 将结果写入CSV文件
            echo "${{ matrix.os }},${version},${threads},${time}" >> results.csv
          done
        done

        echo "Benchmark results on ${{ matrix.os }}:"
        cat results.csv

    - name: Upload results artifact
      uses: actions/upload-artifact@v4
      with:
        name: results-${{ matrix.os }}
        path: results.csv

  # 第二阶段：汇总所有平台的结果并生成图表报告
  summarize_and_plot:
    name: Summarize and Plot Results
    runs-on: ubuntu-latest
    needs: build_and_run # 等待第一阶段所有任务完成

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all result artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Combine results into a single CSV
      shell: bash
      run: |
        # 找到第一个结果文件以提取表头
        find artifacts -name "results.csv" -print0 | xargs -0 head -n 1 | head -n 1 > all_results.csv
        # 将所有结果文件的数据部分追加到汇总文件中
        find artifacts -name "results.csv" -print0 | xargs -0 tail -n +2 >> all_results.csv
        
        echo "Combined results:"
        cat all_results.csv

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install matplotlib pandas

    - name: Generate plot and summary
      run: python plot_results.py

    - name: Upload final report
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-report
        path: |
          results_chart.png
          summary_report.md